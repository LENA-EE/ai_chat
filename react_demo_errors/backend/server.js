require("dotenv").config();
const express = require("express");
const cors = require("cors");
const axios = require("axios"); // –ó–∞–º–µ–Ω—è–µ–º fetch –Ω–∞ axios
const https = require("https");
const { v4: uuidv4 } = require("uuid");

const app = express();
const port = 3001;

// –ú–∏–¥–ª–≤–∞—Ä—ã
app.use(cors());
app.use(express.json());

// –ö–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const GIGA_CLIENT_ID = process.env.GIGA_CLIENT_ID;
const GIGA_CLIENT_SECRET = process.env.GIGA_CLIENT_SECRET;
const GIGA_AUTH_URL = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth";
const GIGA_API_URL =
  "https://gigachat.devices.sberbank.ru/api/v1/chat/completions";
// –ó–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞–ø—Ä–æ—Å POST /chat/completions.
// –°–æ–∑–¥–∞–µ–º HTTPS agent —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π SSL (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
// "–í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ, –∫–æ–Ω–µ—á–Ω–æ, –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"
const httpsAgent = new https.Agent({
  rejectUnauthorized: false,
});

// ================== –ú–û–ö-–î–û–ö–£–ú–ï–ù–¢–´ ==================
const mockDocuments = {
  nexus: {
    title: "–î–æ—Å—Ç—É–ø –∫ Nexus –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
    url: "https://confluence.bank.ru/pages/nexus-access",
    content: `# –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ Nexus –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤

    ## –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è
    
    –î–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ Nexus –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º, –ø—Ä–æ—à–µ–¥—à–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –°–ë –∏ –ø–æ–¥–ø–∏—Å–∞–≤—à–∏–º NDA.
    
    ## –®–∞–≥ 1: –ó–∞—è–≤–∫–∞
    
    - –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É NX-101 –≤ —Ç—Ä–µ—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–∞—Ö
    - –ü–æ–ª—É—á–∏—Ç—å –≤–∏–∑—É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–¥–µ–ª–∞
    - –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å —Å –æ—Ç–¥–µ–ª–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    ## –®–∞–≥ 2: –û–±—É—á–µ–Ω–∏–µ
    
    - –ü—Ä–æ–π—Ç–∏ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –≤ Nexus" (4 —á–∞—Å–∞)
    - –°–¥–∞—Ç—å —Ç–µ—Å—Ç –Ω–∞ –∑–Ω–∞–Ω–∏–µ –ø–æ–ª–∏—Ç–∏–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    - –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è
    
    ## –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞
    
    - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∫–∞–Ω –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã NX-101 –Ω–∞ email: nexus-access@bank.ru
    - –û–∂–∏–¥–∞—Ç—å –ø–∏—Å—å–º–æ —Å –ª–æ–≥–∏–Ω–æ–º –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø–∞—Ä–æ–ª–µ–º (–¥–æ 5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π)
    - –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—Ö–æ–¥–µ —Å–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
    
    ## –í–∞–∂–Ω–æ!
    
    –ü—Ä–∏ —É—Ç–µ—Ä–µ –ø–∞—Ä–æ–ª—è - –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É NX-404 –∏ –ª–∏—á–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –û–ò–ë –∫–∞–±. 304.
    `,
  },
  –æ—Ç–ø—É—Å–∫: {
    title: "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞",
    url: "https://confluence.bank.ru/pages/vacation-process",
    content: `# –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞

    ## –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    
    1. –ó–∞—è–≤–ª–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—É—Å–∫ –ø–æ —Ñ–æ—Ä–º–µ –û–¢-202 (2 —ç–∫–∑.)
    2. –ì—Ä–∞—Ñ–∏–∫ –æ—Ç–ø—É—Å–∫–æ–≤ –æ—Ç–¥–µ–ª–∞ (—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–π)
    3. –°–ø—Ä–∞–≤–∫–∞ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏
    
    ## –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ!)
    
    1. ‚úÖ –ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å
    2. ‚úÖ –ù–∞—á–∞–ª—å–Ω–∏–∫ –æ—Ç–¥–µ–ª–∞ –∫–∞–¥—Ä–æ–≤
    3. ‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä
    4. ‚úÖ –ó–∞–º. –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—è –ø—Ä–∞–≤–ª–µ–Ω–∏—è
    5. ‚úÖ –°–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–∏–æ–¥ –æ—Ç–ø—É—Å–∫–∞)
    6. ‚úÖ –ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è (—Ä–∞—Å—á–µ—Ç –æ—Ç–ø—É—Å–∫–Ω—ã—Ö)
    
    ## –°—Ä–æ–∫–∏
    
    - –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–ª–µ–Ω–∏—è: –Ω–µ –ø–æ–∑–¥–Ω–µ–µ —á–µ–º –∑–∞ 30 –¥–Ω–µ–π –¥–æ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞
    - –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ: –¥–æ 15 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π
    - –í—ã–ø–ª–∞—Ç–∞ –æ—Ç–ø—É—Å–∫–Ω—ã—Ö: –∑–∞ 3 –¥–Ω—è –¥–æ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞
    
    ## –û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏
    
    - –ë–æ–ª—å–Ω–∏—á–Ω—ã–π –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—É—Å–∫–∞: —Ñ–æ—Ä–º–∞ –û–¢-505 + –ª–∏—Å—Ç–æ–∫ –Ω–µ—Ç—Ä—É–¥–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    - –ü–µ—Ä–µ–Ω–æ—Å –æ—Ç–ø—É—Å–∫–∞: —Ñ–æ—Ä–º–∞ –û–¢-606 + –æ–±—ä—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å–∫–∞
    `,
  },
  –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞: {
    title: "–ü–æ—Ä—è–¥–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏",
    url: "https://confluence.bank.ru/pages/business-trip",
    content: `# –ü–æ—Ä—è–¥–æ–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏

    ## –≠—Ç–∞–ø 1: –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
    
    - –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –ö–ú-101 "–ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫—É"
    - –ü–æ–ª—É—á–∏—Ç—å –≤–∏–∑—É —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    - –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å —Å –ø–ª–∞–Ω–æ–≤–æ-—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º –æ—Ç–¥–µ–ª–æ–º
    
    ## –≠—Ç–∞–ø 2: –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    - –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –ö–ú-202 "–ó–∞—è–≤–∫–∞ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
    - –ü—Ä–∏–ª–æ–∂–∏—Ç—å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º)
    - –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å —Å –æ—Ç–¥–µ–æ–º –∑–∞–∫—É–ø–æ–∫
    
    ## –≠—Ç–∞–ø 3: –î–æ–∫—É–º–µ–Ω—Ç—ã
    
    1. –ü—Ä–∏–∫–∞–∑ –æ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–µ (—Ñ–æ—Ä–º–∞ –ö–ú-303)
    2. –°–ª—É–∂–µ–±–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ (—Ñ–æ—Ä–º–∞ –ö–ú-404)
    3. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏ (—Ñ–æ—Ä–º–∞ –ö–ú-505)
    
    ## –≠—Ç–∞–ø 4: –û—Ç—á–µ—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏
    
    - –í —Ç–µ—á–µ–Ω–∏–µ 3 –¥–Ω–µ–π: –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö (—Ñ–æ—Ä–º–∞ –ö–ú-606)
    - –í —Ç–µ—á–µ–Ω–∏–µ 5 –¥–Ω–µ–π: –∞–≤–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º —á–µ–∫–æ–≤
    - –í–æ–∑–≤—Ä–∞—Ç –Ω–µ–∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –≤ –∫–∞—Å—Å—É
    
    ## –õ–∏–º–∏—Ç—ã
    
    - –ì–æ—Å—Ç–∏–Ω–∏—Ü–∞: –Ω–µ –±–æ–ª–µ–µ 15000 —Ä—É–±./—Å—É—Ç–∫–∏
    - –ü–∏—Ç–∞–Ω–∏–µ: –Ω–µ –±–æ–ª–µ–µ 20000 —Ä—É–±./—Å—É—Ç–∫–∏
    - –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: –±–∏–∑–Ω–µ—Å-–∫–ª–∞—Å—Å (–∞–≤–∏–∞), –∫—É–ø–µ (–∂/–¥)
    `,
  },
};

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞
function searchMockDocuments(query) {
  console.log("–ü–æ–∏—Å–∫ –∑–∞–ø—Ä–æ—Å–∞:", query);
  const lowerQuery = query.toLowerCase();
  const queryWords = lowerQuery.split(/\s+/).filter((word) => word.length > 2);
  const results = [];
  const foundIds = new Set();

  for (const [key, doc] of Object.entries(mockDocuments)) {
    const contentLower = doc.content.toLowerCase();
    const titleLower = doc.title.toLowerCase();

    let relevance = 0;

    // –ü–æ–∏—Å–∫ –ø–æ–ª–Ω–æ–π —Ñ—Ä–∞–∑—ã
    if (contentLower.includes(lowerQuery) || titleLower.includes(lowerQuery)) {
      relevance += 10;
    }

    // –ü–æ–∏—Å–∫ –ø–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–ª–æ–≤–∞–º
    for (const word of queryWords) {
      if (titleLower.includes(word)) relevance += 3;
      if (contentLower.includes(word)) relevance += 1;
    }

    console.log(`–î–æ–∫—É–º–µ–Ω—Ç "${doc.title}": —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å=${relevance}`);

    if (relevance > 0 && !foundIds.has(key)) {
      foundIds.add(key);
      results.push({ ...doc, relevance });
    }
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–µ relevant
  return results
    .sort((a, b) => b.relevance - a.relevance)
    .filter((doc) => doc.relevance >= 2); // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥
}

// –ö–æ–¥–∏—Ä—É–µ–º –≤ base64: Client ID:Client Secret
function getAuthHeader() {
  const credentials = `${GIGA_CLIENT_ID}:${GIGA_CLIENT_SECRET}`;
  const base64Credentials = Buffer.from(credentials).toString("base64");
  return `Basic ${base64Credentials}`;
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
let accessToken = null;
let tokenExpiresAt = 0;

function formatResponse(text) {
  return (
    text
      // –†–∞–∑–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
      .replace(/(## .+)/g, "\n\n$1\n")
      // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã
      .replace(/(### .+)/g, "\n\n$1\n")
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã –ø–æ—Å–ª–µ –º–∞—Ä–∫–µ—Ä–æ–≤ —Å–ø–∏—Å–∫–∞
      .replace(/(‚úÖ|üîπ|‚ùå|‚Ä¢|\d+\.) /g, "\n$1 ")
      // –ü–µ—Ä–µ–Ω–æ—Å—ã –ø–æ—Å–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
      .replace(/([.!?])( [–ê-–Ø])/g, "$1\n$2")
      // –ß–∏—Å—Ç–∏–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
      .replace(/\n{3,}/g, "\n\n")
      .trim()
  );
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
async function getAccessToken() {
  try {
    console.log("–ü—ã—Ç–∞—é—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω...");
    console.log("URL:", GIGA_AUTH_URL);
    console.log("CLIENT_ID –µ—Å—Ç—å?:", GIGA_CLIENT_ID ? "–¥–∞" : "–Ω–µ—Ç");

    const response = await axios.post(
      GIGA_AUTH_URL,
      "scope=GIGACHAT_API_PERS",
      {
        httpsAgent: httpsAgent, // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
          Authorization: getAuthHeader(),
          RqUID: uuidv4(),
        },
      }
    );

    console.log("–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", response.status);

    const data = response.data;
    console.log("–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:", data);

    accessToken = data.access_token;
    tokenExpiresAt = data.expires_at;

    console.log("–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞");
    return accessToken;
  } catch (error) {
    console.error(
      "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:",
      error.response?.data || error.message
    );
    throw error;
  }
}

// –ú–∞—Ä—à—Ä—É—Ç-–ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ GigaChat
app.post("/api/ask", async (req, res) => {
  try {
    const { message } = req.body;

    if (!message) {
      return res.status(400).json({ error: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" });
    }

    // ========== –ù–û–í–û–ï: –ò—â–µ–º –≤ –º–æ–∫-–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö ==========
    const documents = searchMockDocuments(message);

    if (documents.length === 0) {
      return res.json({
        response:
          "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å—Ç–∞—Ä—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É.",
        sources: [],
      });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    const context = documents
      .map((doc) => `# ${doc.title}\n${doc.content}`)
      .join("\n\n");

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    const token = await getAccessToken();

    const response = await axios.post(
      GIGA_API_URL,
      {
        model: "GigaChat",
        messages: [
          {
            role: "system",
            content: `–¢—ã AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –±–∞–Ω–∫–∞. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
                     
    –î–û–ö–£–ú–ï–ù–¢–´ –î–õ–Ø –û–¢–í–ï–¢–ê:
    ${context}
    –ü–†–ê–í–ò–õ–ê –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:
    1. –ò—Å–ø–æ–ª—å–∑—É–π –ß–ï–¢–ö–ò–ï –ü–ï–†–ï–ù–û–°–´ –°–¢–†–û–ö –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏
    2. –î–æ–±–∞–≤–ª—è–π –î–í–û–ô–ù–û–ô –ü–ï–†–ï–ù–û–° –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏
    3. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
    4. –í—ã–¥–µ–ª—è–π –≤–∞–∂–Ω–æ–µ **–∂–∏—Ä–Ω—ã–º**
    5. –î–æ–±–∞–≤–ª—è–π —Å–º–∞–π–ª–∏–∫–∏ –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–∏—è üòä
    
    –û–¢–í–ï–ß–ê–ô –° –ü–†–ê–í–ò–õ–¨–ù–´–ú –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï–ú:`,
          },
          {
            role: "user",
            content: message,
          },
        ],
        temperature: 0.1,
        max_tokens: 1000,
      },
      {
        httpsAgent: httpsAgent,
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
      }
    );

    const answer = response.data.choices[0].message.content;

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç + –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    res.json({
      response: answer,
      sources: documents.map((doc) => ({
        title: doc.title,
        url: doc.url,
      })),
    });
  } catch (error) {
    console.error("Error:", error.response?.data || error.message);
    res.status(500).json({
      error:
        "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: " + (error.response?.data?.message || error.message),
    });
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏
app.get("/", (req, res) => {
  res.json({ message: "GigaChat Proxy Server —Ä–∞–±–æ—Ç–∞–µ—Ç" });
});

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
app.listen(port, () => {
  console.log(`–ü—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
});
